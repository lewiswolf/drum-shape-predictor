# core
from typing import Annotated
from typing_extensions import TypeAlias

# dependencies
import numpy as np 			# maths
import numpy.typing as npt	# typing for numpy

Point: TypeAlias = Annotated[list[float], len(2)]
Line: TypeAlias = list[Point] | npt.NDArray[np.float64]
Vertices: TypeAlias = list[Point] | npt.NDArray[np.float64]


def _centroid(V: Vertices, a: float) -> Point: ...
def _generateConvexPolygon(N: int) -> list[Point]: ...
def _isColinear(V: Vertices) -> bool: ...
def _isConvex(V: Vertices) -> bool: ...
def _isPointInsideConvexPolygon(p: Point, V: Vertices) -> bool: ...
def _largestVector(V: Vertices) -> tuple[float, tuple[int, int]]: ...
def _lineIntersection(A: Line, B: Line) -> tuple[bool, Point]: ...
def _normaliseConvexPolygon(V: Vertices) -> list[Point]: ...
def _polygonArea(V: Vertices) -> float: ...
