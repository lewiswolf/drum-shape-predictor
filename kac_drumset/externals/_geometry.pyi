# core
from typing import Annotated
from typing_extensions import TypeAlias

Point: TypeAlias = Annotated[list[float], len(2)]


def _centroid(V: list[Point], a: float) -> Point: ...
def _convexNormalisation(V: list[Point]) -> list[Point]: ...
def _generateConvexPolygon(N: int) -> list[Point]: ...
def _isColinear(V: Annotated[list[Point], len(3)]) -> bool: ...
def _isConvex(V: list[Point]) -> bool: ...
def _isPointInsideConvexPolygon(p: Point, V: list[Point]) -> bool: ...
def _largestVector(V: list[Point]) -> tuple[float, tuple[int, int]]: ...
def _polygonArea(V: list[Point]) -> float: ...
