# core
from typing import Annotated, Literal
from typing_extensions import TypeAlias

# dependencies
import numpy as np 			# maths
import numpy.typing as npt	# typing for numpy

Point: TypeAlias = Annotated[list[float], len(2)]
Line: TypeAlias = list[Point] | npt.NDArray[np.float64]
Vertices: TypeAlias = list[Point] | npt.NDArray[np.float64]


def _centroid(V: Vertices, a: float) -> Point: ...
def _circleArea(r: float) -> float: ...
def _generateIrregularStar(N: int) -> list[Point]: ...
def _generateConvexPolygon(N: int) -> list[Point]: ...
def _generatePolygon(N: int) -> list[Point]: ...
def _generateUnitRectangle(epsilon: float) -> list[Point]: ...
# def _generateUnitTriangle(r: float, theta: float) -> list[Point]: ...
def _isColinear(V: Vertices) -> bool: ...
def _isConvex(V: Vertices) -> bool: ...
def _isPointInsideConvexPolygon(p: Point, V: Vertices) -> bool: ...
def _isSimple(V: Vertices) -> bool: ...
def _largestVector(V: Vertices) -> tuple[float, tuple[int, int]]: ...
def _lineIntersection(A: Line, B: Line) -> tuple[
	Literal['adjacent', 'colinear', 'intersect', 'none', 'vertex'],
	Point,
]: ...
def _lineMidpoint(A: Line) -> Point: ...
def _normaliseConvexPolygon(V: Vertices) -> list[Point]: ...
def _normalisePolygon(V: Vertices) -> list[Point]: ...
def _polygonArea(V: Vertices) -> float: ...
